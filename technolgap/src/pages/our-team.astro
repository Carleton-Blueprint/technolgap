---
import { createClient } from "contentful";
import type { Entry } from "contentful";
import PageLayout from "../layouts/PageLayout.astro";
import CardGrid from "../components/CardGrid.astro"
import Dropdown from '../components/Dropdown.astro';
import Subheading from "../components/Subheading.astro";
import { undefined } from "astro:schema";

const client = createClient({
  space: "33d3d7kdmbg5",
  accessToken: "00BZSByF4Gmh1S-vDtMfsmOLIdqrC8fyV404sOfIwzM",
});

interface TeamMemberFields {
  fields: {
    name: string;
    headshot: {
      metadata: { tags: [] };
      sys: object;
      fields: {
        title: string;
        description: string;
        file: {
          url: string;
          details: [object];
          fileName: string;
          contentType: string;
        };
      };
    };
    position: string;
    institution: string;
    linkedin2?: string;
    programYear: string;
    memberDegree: string;
    teamYearMany: [string];
    bio?: string;
  };
  contentTypeId: "teamMember";
}

type TeamMember = Entry<TeamMemberFields>;

  
  async function fetchTeamMembers(year: string): Promise<TeamMember[]> {
    const response = await client.getEntries({
    content_type: "teamMember",
    "fields.teamYearMany[in]": year,
  });
  
  return response.items as unknown as TeamMember[];
}
async function fetchteamYears(): Promise<string[]> {
  try {
    const response = await client.getEntries<TeamMemberFields>({
      content_type: "teamMember",
      select: ["fields.teamYearMany"],
    });
    
    const yearsSet = new Set<string>();
      
      // Loop through the items and add each year to the Set
      response.items.forEach((item: {fields: {teamYearMany: [string]}}) => {
        item.fields?.teamYearMany.forEach((year: string) => {
          yearsSet.add(year); // Add each year to the Set
        });
      });

    return Array.from(yearsSet).sort((a, b) => {
      return parseInt(a) - parseInt(b); // Sort numerically
    });
    
  } catch (error) {
    console.error("Error fetching years:", error);
    return [];
  }
}

// fetch years
const years = await fetchteamYears()
const defaultYear = years[years.length-1]

const url = new URL(Astro.request.url);
const teamYear = url.searchParams.get("year") || defaultYear || "None";

// Fetch team members
const teamMembers = (await fetchTeamMembers(teamYear)).sort((a: TeamMember, b: TeamMember) => {
  if (a.fields?.position  && b.fields?.position) {
    if ((a.fields.position as unknown as string).toLowerCase() === 'chair' ) {
      return -1;
    } 
    if ((b.fields.position as unknown as string).toLowerCase() === 'chair' ) {
      return 1;
    } 
    //neither are chair
    if ((a.fields.position as unknown as string).toLowerCase() === 'conference director' ){
      return -1;
    }
    if ((b.fields.position as unknown as string).toLowerCase() === 'conference director' ){
      return 1;
    }
    //directors
    if ((a.fields.position as unknown as string).toLowerCase().includes('director')){
      return -1;
    }
    if ((b.fields.position as unknown as string).toLowerCase().includes('director')){
      return 1;
    }
    return 0;
  }
  return 0;
})

const name = "year"
const options = years
const selectedOption = teamYear
---

<PageLayout title="Our Team">
  <article class="our-team classic-bg">
    <Subheading title={"Our Team"} />
    <form action={Astro.request.url} method="GET">
      <!-- <div class="dropdown-container"> -->
        <Dropdown name="year" options={years} selected={teamYear}/>
        
      <!-- </div> -->
    </form>
    <CardGrid entries={teamMembers}/>
  </article>
</PageLayout>

<style>

  form {
    position: relative;
    margin-top: -4em;
  }

  .card-grid {
    width: 100%;
  }

  .dropdown-container {
    position: relative;
    top: 85px; 
    left: 75px;
    z-index: 1;
  }

  article {
    padding-bottom: 5rem;
    margin-bottom: 0;
    border: none;
    border-radius: 0;
    text-align: center;
  }

</style>
