---
import { effect } from "astro:schema";
import Subheading from "../../components/Subheading.astro";
import TextBox from "../../components/TextBox.astro";
import PageLayout from "../../layouts/PageLayout.astro";
import { createClient, type Entry } from "contentful";


const client = createClient({
  space: import.meta.env.CONTENTFUL_SPACE_ID,
  accessToken: import.meta.env.CONTENTFUL_ACCESS_TOKEN,
});

interface conference {
    fields: {
        year: number;
        days: [
            {
                fields: {
                    title: string,
                    date: string,
                    events: events[]
                }
            }
        ],
        applyHere: string;
    },
    contentTypeId: "conference";
}

interface events {
  fields: {
    title: string,
    dateTime: string,
    venue: string,
    summary: string,
    speaker: {}
  };
  contentTypeId: "conferenceEvent";
}

type Events = Entry<events>;
type Conference = Entry<conference>;

const { conference_year } = Astro.params;

// const {ticketTypes, applicationLink} = await (async () => {
async function fetchConference(): Promise<Conference | null> {
    const response = await client.getEntries({
        content_type: "conference",
        "fields.year": conference_year
    });
    if (response.items[0]) {
        return (response.items[0] as Conference);
    } 
    return null;
};

async function fetchEvents(id: string): Promise<Events[]> {
    const response = await client.getEntries({
        content_type: "conferenceDay", // Ensure this matches your Contentful content type
        "sys.id": id
    });
    return response.items[0].fields.events as Events[]
}

let {days} = (await fetchConference())?.fields as conference['fields'] ?? {days: null}
// HANDLE IS DAYS IS NULL
let events = (await fetchEvents("1ITnNHqgKkqhWF7jet8Bpl"))
---

<PageLayout title="Conference Schedule">
    <article class="classic-bg">
        <h2>Schedule</h2>
        <div class="rows">
            {days.map((d) => (
                <TextBox heading={d.fields.title} text={d.fields.date} className={d.fields.title=="Day 1" ? "schedule-days selected" : "schedule-days"}/>
            ))}
        </div>
        {events.map((e) => (
            <TextBox heading={e.fields.title} text={e.fields.summary} description={[e.fields.dateTime, e.fields.venue]} className="schedule-event"/>
            <br/> <br/>
        ))}
    </article>
</PageLayout>

<style>
    article {
        margin: 1px;
    }

    h2 {
        font-size: 50px;
        color: #5A6160;
        margin-top: 90px;
        margin-bottom: 2rem;
        text-shadow: 0px 2px 2px #7f7f7f;
        padding: 0 20px;
        text-align: center;
        position: relative;
    }

    .rows {
        display: flex;
        justify-content: center;
        gap: 20px;
        padding: 20px;
        margin-bottom: 35px;
    }

    :global(.schedule-days p) {
        background-color: #5A6160 !important;
        font-weight: 100;
        padding: 10px 75px !important;
        border-radius: 40px !important;
    }

    :global(.schedule-days .text){
        font-size: 25px;
    }
    
    :global(.selected span) {
        font-weight: bold;
        color: #f7deed !important;
    } 

    :global(.selected p), :global(.schedule-days:hover p){
        outline: 5px solid #fff;
        box-shadow: 5px 7px 2px 1px #00000050, 10px 10px 0px #f7deed !important;
        cursor: pointer;
    }
    
    :global(.schedule-event p) {
        outline: 2px solid #fff;
        box-shadow: 3px 5px 2px 1px #00000050, 10px 10px 0px #f7deed !important;
        background-color: #5A6160 !important;
        border-radius: 40px !important;
        width: 80%;
        max-width: 800px;
    }
</style>