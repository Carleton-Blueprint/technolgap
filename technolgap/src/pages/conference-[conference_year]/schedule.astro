---
import { effect } from "astro:schema";
import Subheading from "../../components/Subheading.astro";
import TextBox from "../../components/TextBox.astro";
import PageLayout from "../../layouts/PageLayout.astro";
import { createClient, type Entry } from "contentful";


const client = createClient({
  space: import.meta.env.CONTENTFUL_SPACE_ID,
  accessToken: import.meta.env.CONTENTFUL_ACCESS_TOKEN,
});

interface conference {
    fields: {
        year: number;
        days: [
            {
                sys: {
                    id: string
                }
                fields: {
                    title: string,
                    date: string,
                    events: events[]
                }
            }
        ],
        applyHere: string;
    },
    contentTypeId: "conference";
}

interface events {
  fields: {
    title: string,
    start: string,
    end: string,
    venue: string,
    summary: string,
    speaker: {}
  };
  contentTypeId: "conferenceEvent";
}

interface speaker {
  fields: {
    name: string,
    companyPosition: string,
    companyName: string
  };
  contentTypeId: "speaker";
}

type Events = Entry<events>;
type Conference = Entry<conference>;
type Speaker = Entry<speaker>;

const { conference_year } = Astro.params;

// const {ticketTypes, applicationLink} = await (async () => {
async function fetchConference(): Promise<Conference | null> {
    const response = await client.getEntries({
        content_type: "conference",
        "fields.year": conference_year
    });
    if (response.items[0]) {
        return (response.items[0] as Conference);
    } 
    return null;
};

async function fetchEvents(id: string): Promise<Events[]> {
    const response = await client.getEntries({
        content_type: "conferenceDay", // Ensure this matches your Contentful content type
        "sys.id": id
    });
    let events =  response.items[0].fields.events as Events[]
    for(let e of events){
        if (e.fields.speaker) {
            e.fields.speaker = await fetchSponsor(e.fields.speaker.sys.id)
        }
    }
    return events
}

async function fetchSponsor(id: string): Promise<Speaker> {
    const response = await client.getEntries({
        content_type: "speaker",
        "sys.id": id
    })
    return response.items[0] as Speaker
}

let {days} = (await fetchConference())?.fields as conference['fields'] ?? {days: null}
// HANDLE IS DAYS IS NULL


const url = new URL(Astro.request.url);
const selectedDay = url.searchParams.get("day") || days[0].sys.id;
let events = (await fetchEvents(selectedDay))
---

<PageLayout title="Conference Schedule">
    <article class="classic-bg">
        <h2>Schedule</h2>
        <div class="rows">
            {days.map((d) => (
                <div id={d.sys.id} class="day">
                    <TextBox heading={d.fields.title} text={d.fields.date} className={d.sys.id===selectedDay ? "schedule-days selected" : "schedule-days"}/>
                </div>
            ))}
        </div>
        {events.map((e) => (
            <TextBox heading={e.fields.title} text={e.fields.summary} description={e.fields.speaker ? [e.fields.start+" - "+e.fields.end, e.fields.venue, e.fields.speaker.fields.name+", "+e.fields.speaker.fields.companyPosition+" at "+e.fields.speaker.fields.companyName] : [e.fields.start+" - "+e.fields.end, e.fields.venue]} className="schedule-event"/>
            <add-to-calendar data-event={e}>
                <button>Add to Calendar</button>
            </add-to-calendar>
            <br/> <br/>
        ))}
    </article>
</PageLayout>

<style>
    article {
        margin: 1px;
    }

    h2 {
        font-size: 50px;
        color: #5A6160;
        margin-top: 90px;
        margin-bottom: 2rem;
        text-shadow: 0px 2px 2px #7f7f7f;
        padding: 0 20px;
        text-align: center;
        position: relative;
        -webkit-text-stroke: 0.5px #ffffff;
    }

    .rows {
        display: flex;
        justify-content: center;
        gap: 20px;
        padding: 20px;
        margin-bottom: 35px;
    }

    :global(.schedule-days p) {
        background-color: #5A6160 !important;
        font-weight: 100;
        padding: 10px !important;
        border-radius: 30px !important;
        width: 250px;
    }

    :global(.schedule-days .text){
        font-size: 25px;
    }
    
    :global(.selected span) {
        font-weight: bold;
        color: #f7deed !important;
    } 

    :global(.selected p), :global(.schedule-days:hover p){
        outline: 5px solid #fff;
        box-shadow: 5px 7px 2px 1px #00000050, 10px 10px 0px #f7deed !important;
        cursor: pointer;
    }
    
    :global(.schedule-event p) {
        outline: 2px solid #fff;
        box-shadow: 3px 5px 2px 1px #00000050, 10px 10px 0px #f7deed !important;
        background-color: #5A6160 !important;
        border-radius: 40px !important;
        width: 80%;
        max-width: 800px;
    }

    @media (max-width: 970px) {
        :global(.schedule-days p) {
            width: 200px;
        }
        
        :global(.schedule-days .text) {
            font-size: 20px;
        }
    }
    
    @media (max-width: 800px) {
        .rows {
            gap: 10px;
            padding: 20px 0;
        }

        :global(.schedule-days p) {
            width: 150px;
        }
    }
    
    @media (max-width: 650px) {
        :global(.schedule-days p) {
            width: 100px;
        }
    }
    
    @media (max-width: 500px) {
        :global(.schedule-days .text) {
            font-size: 15px;
        }
        .rows {
            gap: 0;
        }
    }
    
    @media (max-width: 450px) {
        :global(.schedule-days p) {
            width: 250px;
        }

        :global(.schedule-days) {
            margin-bottom: 30px;
        }

        .rows {
            display: block;
        }
    }
</style>

<script>
    const days = document.getElementsByClassName("day")
    for (const d of days) {
        d.addEventListener('click', (e) => {
            const url = new URL(window.location.href);
            url.searchParams.set("day", e.currentTarget.id); // Updates the param if it exists
            window.history.replaceState({}, "", url);
            window.location.reload();
        })
    }

    class AddToCalendar extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const event = this.dataset.event;
      console.log(event)
      const button = this.querySelector('button');
      button.addEventListener('click', () => {
        console.log(event.fields)
      });
    }
  }

  customElements.define('add-to-calendar', AddToCalendar);
</script>