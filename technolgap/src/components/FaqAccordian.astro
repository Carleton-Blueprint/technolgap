---
interface FaqProps {
  faqList: FaqFields[];
  grey: boolean;
}

interface FaqFields {
  fields: {
    question: string;
    answer: string;
  };
  contentTypeId: "faq";
}

const { faqList, grey=false } = Astro.props;
---

<div class="faq-container">
  {faqList.map((faq: FaqFields, index: number) => (
    <div class={(grey ? "grey " : "green ")+"faq-item"}>
      <div class="faq-question">
        <h3>{faq.fields.question}</h3>
        <span class="arrow">&#9660;</span>
      </div>
      <div class=" faq-answer">
        <p>{faq.fields.answer}</p>
      </div>
    </div>
  ))}
</div>

<style>

  .grey {
    background-color: #5A6160; !important
  }
  
  .green {
    background-color: #2d6d68; 

  }

    .faq-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      width: 70%; /* Set width to 70% of the page */
      max-width: 900px; /* Optional: Add a max-width to limit the size */
      margin: 0 auto; /* Center align horizontally */
      padding-bottom: 100px;
    }

    h3, p {
      margin: 0;
      color:white; 
    }

    p {
      font-size: 17px;
    }
    
    .faq-item {
      padding: 1.5rem; 
      border-radius: 15px;
    }
    
    .faq-question {
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }
  
    .faq-answer {
      display: none;
      padding-top: 1rem;
    }
  
    .faq-item.open .faq-answer {
      display: block;
    }
  
    .faq-item.open .arrow {
      transform: rotate(180deg);
    }
  </style>
  
<script>
  document.querySelectorAll('.faq-item').forEach(item => {
    const toggleButton = item.querySelector('.faq-question');
    
    // Ensure toggleButton is not null before adding the event listener
    if (toggleButton) {
      toggleButton.addEventListener('click', () => {
        item.classList.toggle('open');
      });
    }
  });
</script>
